<?xml version="1.0" encoding="UTF-8"?>
<!--
This software is in the public domain under CC0 1.0 Universal plus a 
Grant of Patent License.

To the extent possible under law, the author(s) have dedicated all
copyright and related and neighboring rights to this software to the
public domain worldwide. This software is distributed without any
warranty.

You should have received a copy of the CC0 Public Domain Dedication
along with this software (see the LICENSE.md file). If not, see
<http://creativecommons.org/publicdomain/zero/1.0/>.
-->
<screen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://moqui.org/xsd/xml-screen-3.xsd"
        default-menu-title="Service Load Runner" default-menu-index="3" render-modes="vue,qvue" server-static="vue,qvue">


    <transition name="getRunnerInfo" method="get" read-only="true">
        <!-- REST-ish endpoint -->
        <actions><script><![CDATA[
            import org.moqui.context.ExecutionContext
            ExecutionContext ec = context.ec
            // TODO cpu, ram/gc stats, other stuff on System Dashboard
            def loadRunner = ec.service.getLoadRunner()
            def serviceInfos = loadRunner.serviceInfos
            def serviceInfoList = []
            for (int i = 0; i < serviceInfos.size(); i++) {
                def serviceInfo = serviceInfos.get(i)
                def runsPerSecAvg = serviceInfo.totalTime ? serviceInfo.runCount / (serviceInfo.totalTime/1000) : 0
                def timeSinceBegin = serviceInfo.lastRunTime - serviceInfo.beginTime
                def runsPerSecTime = timeSinceBegin ? serviceInfo.runCount / (timeSinceBegin/1000) : 0
                serviceInfoList.add([serviceName:serviceInfo.serviceName, parametersExpr:serviceInfo.parametersExpr,
                        targetThreads:serviceInfo.targetThreads, currentThreads:serviceInfo.currentThreads.get(),
                        runDelayMs:serviceInfo.runDelayMs, rampDelayMs:serviceInfo.rampDelayMs,
                        runCount:serviceInfo.runCount, errorCount:serviceInfo.errorCount,
                        lastResult:serviceInfo.lastResult, beginTime:serviceInfo.beginTime,
                        lastRunTime:serviceInfo.lastRunTime, lastRunTimeStr:(new Timestamp(serviceInfo.lastRunTime).toString()),
                        totalTime:serviceInfo.totalTime, totalSquaredTime:serviceInfo.totalSquaredTime,
                        timeAverage:(serviceInfo.runCount ? serviceInfo.totalTime / serviceInfo.runCount : 0),
                        timeStdDev:(serviceInfo.totalSquaredTime && serviceInfo.runCount > 1 ?
                            Math.sqrt((serviceInfo.totalSquaredTime - ((serviceInfo.totalTime*serviceInfo.totalTime) / serviceInfo.runCount)).abs() / (serviceInfo.runCount - 1)) : null),
                        runsPerSecAvg:runsPerSecAvg,
                        runsPerSecTime:runsPerSecTime,
                        busyPercent:(runsPerSecAvg ? 100*runsPerSecTime/runsPerSecAvg : 0)
                ])
            }

            def executorInfo = [execIndex:loadRunner.execIndex.get(), totalThreads:loadRunner.scheduledExecutor?.getQueue()?.size()]

            Map<String, Object> runnerInfo = [executorInfo:executorInfo, serviceInfos:serviceInfoList] as Map<String, Object>
            ec.web.sendJsonResponse(runnerInfo)
            ]]></script></actions>
        <default-response type="none"/>
    </transition>
    <transition name="setServiceInfo" method="post">
        <actions><script>ec.service.getLoadRunner().setServiceInfo(serviceName, parametersExpr, targetThreads as int,
                (runDelayMs as Integer) ?: 100, (rampDelayMs as Integer) ?: 500)</script></actions>
        <default-response url="."/>
    </transition>
    <transition name="begin" method="post">
        <actions><script>ec.service.getLoadRunner().begin()</script></actions>
        <default-response url="."/>
    </transition>
    <transition name="stopNow" method="post">
        <actions><script>ec.service.getLoadRunner().stopNow()</script></actions>
        <default-response url="."/>
    </transition>
    <transition name="stopWait" method="post">
        <actions><script>ec.service.getLoadRunner().stopWait()</script></actions>
        <default-response url="."/>
    </transition>

    <actions>
    </actions>
    <widgets>
        <render-mode><text type="qvue"><![CDATA[
            <template><div>
                <p><strong>All delay, run, etc times in milliseconds (ms)</strong></p>
                <q-form @submit.prevent="setServiceInfo" autocapitalize="off" autocomplete="off">
                    <m-text-line dense outlined v-model="newServiceInfo.serviceName" name="serviceName"
                                 stack-label label="Service Name" type="text" size="100"></m-text-line>
                    <m-text-line dense outlined v-model="newServiceInfo.parametersExpr" name="parametersExpr"
                                 stack-label label="Parameters Expression" type="text" size="100"></m-text-line>

                    <div class="row"><div class="q-px-xs col-sm-4">
                        <m-text-line dense outlined v-model="newServiceInfo.targetThreads" name="targetThreads"
                                     stack-label label="Threads" type="text" size="10"></m-text-line>
                    </div><div class="q-px-xs col-sm-4">
                        <m-text-line dense outlined v-model="newServiceInfo.runDelayMs" name="runDelayMs"
                                     stack-label label="Run Delay" type="text" size="10"></m-text-line>
                    </div><div class="q-px-xs col-sm-4">
                        <m-text-line dense outlined v-model="newServiceInfo.rampDelayMs" name="rampDelayMs"
                                     stack-label label="Ramp Delay" type="text" size="10"></m-text-line>
                    </div></div>
                    <q-btn dense outline no-caps color="primary" type="submit" name="submitBtn" label="Set Service Info"></q-btn>
                </q-form>
                <q-btn dense outline no-caps color="positive" type="button" label="Begin" @click.prevent="callBegin"></q-btn>
                <q-btn dense outline no-caps color="negative" type="button" label="Stop Now" @click.prevent="callStopNow"></q-btn>
                <q-btn dense outline no-caps color="negative" type="button" label="Stop Wait" @click.prevent="callStopWait"></q-btn>

                <div class="row">
                    <div class="q-px-xs col-md-2 col-sm-4"><strong>Exec Index</strong> {{executorInfo.execIndex}}</div>
                    <div class="q-px-xs col-md-2 col-sm-4"><strong>Total Threads</strong> {{executorInfo.totalThreads}}</div>
                </div>
                <div class="table q-table" id="service_table">
                    <div class="thead">
                        <div class="tr">
                            <div class="th">Service &amp; Parameters</div>
                            <div class="th">Target</div>
                            <div class="th">Current</div>
                            <div class="th">Run Delay</div>
                            <div class="th">Ramp Delay</div>
                            <div class="th">Run Count</div>
                            <div class="th">Error Count</div>
                            <div class="th">Time Average</div>
                            <div class="th">Time Std Dev</div>
                            <div class="th">Runs/Sec Avg</div>
                            <div class="th">Runs/Sec Time</div>
                            <div class="th">Busy Pct</div>
                            <div class="th">Last Run</div>
                        </div>
                    </div>
                    <div class="tbody">
                        <div v-for="serviceInfo in serviceInfos" class="tr">
                            <div class="td">
                                <div>{{serviceInfo.serviceName}}</div>
                                <div>{{serviceInfo.parametersExpr}}</div>
                            </div>
                            <div class="td text-center">{{serviceInfo.targetThreads}}</div>
                            <div class="td text-center">{{serviceInfo.currentThreads}}</div>
                            <div class="td text-center">{{serviceInfo.runDelayMs}}</div>
                            <div class="td text-center">{{serviceInfo.rampDelayMs}}</div>
                            <div class="td text-center">{{serviceInfo.runCount}}</div>
                            <div class="td text-center">{{serviceInfo.errorCount}}</div>
                            <div class="td text-center">{{serviceInfo.timeAverage}}</div>
                            <div class="td text-center">{{serviceInfo.timeStdDev}}</div>
                            <div class="td text-center">{{serviceInfo.runsPerSecAvg}}</div>
                            <div class="td text-center">{{serviceInfo.runsPerSecTime}}</div>
                            <div class="td text-center">{{serviceInfo.busyPercent}}</div>
                            <div class="td text-center">{{serviceInfo.lastRunTimeStr}}</div>
                        </div>
                    </div>
                </div>
                <div v-for="serviceInfo in serviceInfos">
                    <pre>{{JSON.stringify(serviceInfo.lastResult)}}</pre>
                </div>

                </div></template>
            <script>
                module.exports = {
                    data: function () { return {
                        newServiceInfo:{ serviceName:"", targetThreads:"10", runDelayMs:"100", rampDelayMs:"500" },
                        executorInfo:{}, serviceInfos:[], getInfoInterval:null
                    } },
                    methods: {
                        setServiceInfo: function () {
                            var vm = this;
                            $.ajax({ type:"POST", url:"/apps/tools/Service/ServiceLoadRunner/setServiceInfo",
                                data:this.newServiceInfo, dataType:"json",
                                headers:{ Accept:'application/json', 'X-CSRF-Token':this.$root.moquiSessionToken },
                                error:moqui.handleAjaxError,
                                success: function(responseObj, status, jqXHR) {
                                    vm.getRunnerInfo();
                                }
                            });
                        },
                        getRunnerInfo: function () {
                            var vm = this;
                            $.ajax({ type:"GET", url:"/apps/tools/Service/ServiceLoadRunner/getRunnerInfo",
                                dataType:"json", headers:{ Accept:'application/json' },
                                error:moqui.handleAjaxError,
                                success: function(responseObj, status, jqXHR) {
                                    vm.executorInfo = responseObj.executorInfo
                                    vm.serviceInfos = responseObj.serviceInfos;
                                    if (vm.serviceInfos && vm.serviceInfos.length) {
                                        var serviceInfo = vm.serviceInfos[0];
                                        if (!vm.newServiceInfo.serviceName || !vm.newServiceInfo.serviceName.length)
                                            vm.newServiceInfo.serviceName = serviceInfo.serviceName || ""
                                        if (!vm.newServiceInfo.parametersExpr || !vm.newServiceInfo.parametersExpr.length)
                                            vm.newServiceInfo.parametersExpr = serviceInfo.parametersExpr || ""
                                    }
                                }
                            });
                            // TODO timeout after last nav and clear the interval?
                        },
                        callBegin: function () {
                            $.ajax({ type:"POST", url:"/apps/tools/Service/ServiceLoadRunner/begin",
                                dataType:"json", headers:{ Accept:'application/json', 'X-CSRF-Token':this.$root.moquiSessionToken },
                                error:moqui.handleAjaxError, success: function(responseObj, status, jqXHR) { }});
                        },
                        callStopNow: function () {
                            $.ajax({ type:"POST", url:"/apps/tools/Service/ServiceLoadRunner/stopNow",
                                dataType:"json", headers:{ Accept:'application/json', 'X-CSRF-Token':this.$root.moquiSessionToken },
                                error:moqui.handleAjaxError, success: function(responseObj, status, jqXHR) { }});
                        },
                        callStopWait: function () {
                            $.ajax({ type:"POST", url:"/apps/tools/Service/ServiceLoadRunner/stopWait",
                                dataType:"json", headers:{ Accept:'application/json', 'X-CSRF-Token':this.$root.moquiSessionToken },
                                error:moqui.handleAjaxError, success: function(responseObj, status, jqXHR) { }});
                        }
                    },
                    mounted: function () {
                        // kick off the runner info poller, once per second (1000ms)
                        this.getInfoInterval = setInterval(this.getRunnerInfo, 2*1000)
                    },
                    beforeDestroy: function() {
                        if (this.getInfoInterval) {
                            clearInterval(this.getInfoInterval);
                            this.getInfoInterval = null;
                        }
                    }
                }
            </script>
        ]]></text><text type="html,vuet"><![CDATA[
            <p><strong>Only supported in the 'qvt' render mode, go to the same URL under /qapps (instead of /apps or /vapps)</strong></p>
        ]]></text></render-mode>
    </widgets>
</screen>
